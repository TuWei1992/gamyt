//
//  CommonFun.m
//  ReportTable
//
//  Created by xdrao on 14-3-17.
//  Copyright (c) 2014年 xdrao. All rights reserved.
//

#import "MyCommonFun.h"
#import "MyConnection.h"
#import "EPUtil.h"
#import "PopPromptView.h"

@implementation MyCommonFun


#pragma mark--加阴影
+(void)addShadowOpacity:(float)opacity forView:(UIView *)addView
{
    addView.layer.masksToBounds = NO;
    addView.layer.shadowOffset = CGSizeMake(0, 2);
    addView.layer.shadowOpacity = opacity;
    addView.layer.shadowPath = [UIBezierPath bezierPathWithRect:addView.bounds].CGPath;
}

#pragma mark--把字典和数组转换成json字符串
+(NSString *)stringTOjson:(id)temps   //把字典和数组转换成json字符串
{
    NSData* jsonData =[NSJSONSerialization dataWithJSONObject:temps
                                                      options:NSJSONWritingPrettyPrinted error:nil];
    NSString *strs=[[NSString alloc] initWithData:jsonData
                                         encoding:NSUTF8StringEncoding];
    return strs;
}
#pragma mark--view截图
+(UIImage *)ScreenshotsImage:(UIView *)tempView
{
    //view的截图
    UIGraphicsBeginImageContextWithOptions(tempView.frame.size, tempView.opaque, 0.0);
    [tempView.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage * img = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
//    UIImageWriteToSavedPhotosAlbum(img, self,nil, nil);//保存图片
    return img;
}
#pragma mark--随机返回颜色
+ (UIColor*)randomColor
{
    CGFloat hue = ( arc4random() % 256 / 256.0 );  //  0.0 to 1.0
    CGFloat saturation = ( arc4random() % 128 / 256.0 ) + 0.5;  //  0.5 to 1.0, away from white
    CGFloat brightness = ( arc4random() % 128 / 256.0 ) + 0.5;  //  0.5 to 1.0, away from black
    return [UIColor colorWithHue:hue saturation:saturation brightness:brightness alpha:1];
}
#pragma mark--导航栏的frame
+(CGRect)kNavgationBarFrame
{
    CGRect rect;
    float originY = 0;
    float sizeHeight = 44;
    if (IOS7) {
        originY = 0;
        sizeHeight = 64;
    }
    rect = CGRectMake(0, originY, boundsWidth, sizeHeight);
    return rect;
}
#pragma mark--箱运 导航栏的frame
+(CGRect)kMapNavgationBarFrameByWidth:(float)w
{
    CGRect rect;
    float sizeHeight = 44;
    if (IOS7) {
        sizeHeight = 64;
    }
    rect = CGRectMake(0, 0, w, sizeHeight);
    return rect;
}
#pragma mark--
#pragma mark--去尾位空格
+(NSString *)deleteBlankFormTextField:(UITextField *)tempTextField
{
    NSString *tempString = [tempTextField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    tempTextField.text = tempString;
    return tempString;
}
#pragma mark--
#pragma mark--获得系统时间yyyy-MM-dd
+(NSString *)getCurrentTime
{
    //获得系统时间
    NSDate *  senddate=[NSDate date];
    NSDateFormatter  *dateformatter=[[NSDateFormatter alloc] init];
    [dateformatter setDateFormat:@"yyyy-MM-dd"];
    NSString *  locationString=[dateformatter stringFromDate:senddate];
    NSLog(@"起始时间 －》%@",locationString);
    return locationString;
}
#pragma mark--
#pragma mark--获得系统时间yyyyMMdd
+(NSString *)getCurrentTime2
{
    //获得系统时间
    NSDate *  senddate=[NSDate date];
    NSDateFormatter  *dateformatter=[[NSDateFormatter alloc] init];
    [dateformatter setDateFormat:@"yyyyMMdd"];
    NSString *  locationString=[dateformatter stringFromDate:senddate];
    NSLog(@"起始时间 －》%@",locationString);
    return locationString;
}
#pragma mark--
#pragma mark--获得系统时间yyyy-MM-dd HH:mm:ss
+(NSString *)getCurrentTime3
{
    //获得系统时间
    NSDate *  senddate=[NSDate date];
    NSDateFormatter  *dateformatter=[[NSDateFormatter alloc] init];
    [dateformatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    NSString *  locationString=[dateformatter stringFromDate:senddate];
    NSLog(@"起始时间 －》%@",locationString);
    return locationString;
}
#pragma mark--
#pragma mark--判断服务器返回数据是否为null
+(id)dictionary:(NSMutableDictionary *)tempDic objectForKey:(NSString *)tempKey
{
    if ([tempDic objectForKey:tempKey]) {
        NSString *value =[NSString stringWithFormat:@"%@",[tempDic objectForKey:tempKey]];
        if ([value isEqualToString:@"null"] || [value isEqualToString:@"NULL"] || [value isEqualToString:@"(null)"] || [value isEqualToString:@"(NULL)"]) {
            return @"";
        }
        else{
            return [NSString stringWithFormat:@"%@",[tempDic objectForKey:tempKey]];
        }
    }
    else{
        return @"";
    }
    return @"";
}
#pragma mark --根据标题内容的多少确定Size
+(CGSize)calculateSizeW:(CGFloat)w andH:(CGFloat)h andFont:(UIFont *)f ByTitle:(NSString *)title
{
    CGSize size;
    if (w !=0) {
        size = CGSizeMake(w, MAXFLOAT);
    }
    if (h != 0) {
        size = CGSizeMake(MAXFLOAT, h);
    }
    CGSize titleSize = [title sizeWithFont:f constrainedToSize:size lineBreakMode:NSLineBreakByWordWrapping];
    return titleSize;
}

#pragma mark  邮箱合法验证
+(BOOL)isValidateEmail:(NSString *)email
{
    NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    BOOL bo= [emailTest evaluateWithObject:email];
    return bo;
}
#pragma mark  手机合法验证
+(BOOL) isValidateMobile:(NSString *)mobile
{
    //手机号以13， 15，18开头，八个 \d 数字字符
    NSString *phoneRegex = @"^((13[0-9])|(15[^4,\\D])|(18[0,0-9]))\\d{8}$";
    NSPredicate *phoneTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",phoneRegex];
    return [phoneTest evaluateWithObject:mobile];
}
#pragma mark--要有 数字
+(BOOL)onlyNumber:(NSString *)tempString
{
    NSCharacterSet*cs;
    cs = [[NSCharacterSet characterSetWithCharactersInString:NUMBERS] invertedSet];
    NSString*filtered = [[tempString componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@""];
    if (filtered && [filtered length] != 0) {
        return YES;
    }
    else{
        return NO;
    }
}
#pragma mark--要有 字母
+(BOOL)onlyAlpha:(NSString *)tempString
{
    NSCharacterSet*cs1 = [[NSCharacterSet characterSetWithCharactersInString:kAlpha] invertedSet];
    NSString*filtered = [[tempString componentsSeparatedByCharactersInSet:cs1] componentsJoinedByString:@""];
    if (filtered && [filtered length] != 0) {
        return YES;
    }
    else{
        return NO;
    }
}
#pragma mark--只能为 字母和数字
+(BOOL)onlyAlphaNumber:(NSString *)tempString{
    NSCharacterSet*cs1 = [[NSCharacterSet characterSetWithCharactersInString:kAlphaNum] invertedSet];
    NSString*filtered = [[tempString componentsSeparatedByCharactersInSet:cs1] componentsJoinedByString:@""];
    if ([filtered isEqualToString:tempString]) {
        return YES;
    }
    else{
        return NO;
    }
}
#pragma mark--只能为 字母、数字和下划线
+(BOOL)onlyAlphaNumberUnderline:(NSString *)tempString{
    NSCharacterSet*cs1 = [[NSCharacterSet characterSetWithCharactersInString:kAlphaNumUnderline] invertedSet];
    NSString*filtered = [[tempString componentsSeparatedByCharactersInSet:cs1] componentsJoinedByString:@""];
    if ([filtered isEqualToString:tempString]) {
        return YES;
    }
    else{
        return NO;
    }
}
#pragma mark--如果是小写字母 转换成大写的
+(BOOL)AlphaExchange:(NSString *)tempString{
    NSCharacterSet*cs1 = [[NSCharacterSet characterSetWithCharactersInString:kAlpha1] invertedSet];
    NSString*filtered = [[tempString componentsSeparatedByCharactersInSet:cs1] componentsJoinedByString:@""];
    if ([filtered isEqualToString:tempString]) {
        return YES;
    }
    else{
        return NO;
    }
}
#pragma mark--只能为 字母、数字 逗号
+(BOOL)onlyAlphaNumberComma:(NSString *)tempString{
    NSCharacterSet*cs1 = [[NSCharacterSet characterSetWithCharactersInString:kAlphaNumComma] invertedSet];
    NSString*filtered = [[tempString componentsSeparatedByCharactersInSet:cs1] componentsJoinedByString:@""];
    if ([filtered isEqualToString:tempString]) {
        return YES;
    }
    else{
        return NO;
    }
}
#pragma mark--#pragma mark--后台返回字段 处理
+(void)dealwithServerCallBackInfoData:(id)infoData
{
    if ([[infoData objectForKey:@"rtnFlag"] isEqualToString:@"F"]){
        NSString *errorStr = [infoData objectForKey:@"rtnInfo"]?[infoData objectForKey:@"rtnInfo"]:[infoData objectForKey:@"rtnBody"];
        if ([errorStr isEqualToString:@"nouser"]) {
            errorStr = @"用户名或密码不存在";
        }
        else if ([errorStr isEqualToString:@"nopermit"]) {
            errorStr = @"没有权限,请使用其他功能";
        }
        else{
            errorStr = errorStr;
        }
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:errorStr delegate:nil cancelButtonTitle:nil otherButtonTitles:@"确定", nil];
        [alert show];
    }
    else if ([[infoData objectForKey:@"rtnFlag"] isEqualToString:@"E"]){
        NSString *error = [infoData objectForKey:@"rtnInfo"];
        
        if (![EPUtil StringNullUtil:error]&&[error length]==32) {
            NSString *tempError=[error substringFromIndex:22];
            NSString *temp=[NSString stringWithFormat:@"网络不给力(%@)，请重新操作",tempError];
            UIAlertView * alertShowVersion = [[UIAlertView alloc] initWithTitle:(@"提示") message:temp delegate:nil cancelButtonTitle:(@"确定") otherButtonTitles:nil];
            [alertShowVersion show];
        }else{
            UIAlertView * alertShowVersion = [[UIAlertView alloc] initWithTitle:(@"提示") message:error delegate:nil cancelButtonTitle:(@"确定") otherButtonTitles:nil];
            [alertShowVersion show];
        }
    }
    else{
    }
}
#pragma mark--
#pragma mark--MOL船公司更改堆场功能查询堆场列表接口
+(void)requestMOL_depot_MBWithShowView:(UIView *)tempView andDictionary:(NSMutableDictionary *)depotDic
{
    NSMutableDictionary *tempDic = [[NSMutableDictionary alloc] init];
    [tempDic setObject:MAIN_URL forKey:MAIN_URL_TAG];
    [tempDic setObject:@"10012" forKey:INTERFACE_TAG];
    [tempDic setObject:USER_NAME forKey:@"username"];
    [tempDic setObject:USER_orgCode forKey:@"orgCode"];
    
    [tempDic addEntriesFromDictionary:depotDic];
    
    MyConnection *connection= [[MyConnection alloc]init];
    if (tempView) {
        [connection addShowHUDView:tempView];
    }
    [connection setRequestTimeoutInterval:60];
    [connection connectionAsynchronousRequstData:tempDic];
    connection.finishRequstDataBlock = ^(id data,NSError *error){
        if ([[data objectForKey:@"rtnFlag"] isEqualToString:@"T"]){
            [SingletonClass shareInstance].MOL_depotArray = [data objectForKey:@"rtnBody"];
            NSLog(@"MOL_depotArray:%@",[SingletonClass shareInstance].MOL_depotArray);
        }
        else{
            NSLog(@"MOL船公司更改堆场功能查询堆场列表获取失败");
        }
    };
}
#pragma mark--
#pragma mark--请求码表
+(void)requestAll_MB:(MyConnection *)connection showView:(UIView *)tempView tagrt:(id)tagrt
{
    
    NSMutableDictionary *tempDic = [[NSMutableDictionary alloc] init];
    [tempDic setObject:MAIN_URL_MB forKey:MAIN_URL_TAG];
    [tempDic setObject:@"10000" forKey:INTERFACE_TAG];
    [tempDic setObject:USER_orgCode forKey:@"orgCode"];
    [tempDic setObject:ALL_MB_KEY forKey:@"codeName"];
    
    connection= [[MyConnection alloc]init];
    if (tempView) {
        [connection addShowHUDView:tempView];
    }
    [connection setRequestTimeoutInterval:60];
    [connection connectionAsynchronousRequstData:tempDic];
    connection.finishRequstDataBlock = ^(id data,NSError *error){
        if ([[data objectForKey:@"rtnFlag"] isEqualToString:@"T"]){
            [SingletonClass shareInstance].MB_Dictionary = [data objectForKey:@"rtnBody"];
            NSLog(@"MB_Dic:%@",[SingletonClass shareInstance].MB_Dictionary);
            
            //申请人
            NSMutableDictionary *dic1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@"",@"key",
                                         @" ",@"value", nil];
            [[[SingletonClass shareInstance].MB_Dictionary objectForKey:MB_KEY_TRANSCARRIER] insertObject:dic1 atIndex:0];
            
            //返箱码头
            NSMutableDictionary *dic2 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@"",@"key",@"全部",@"value", nil];
            [[[SingletonClass shareInstance].MB_Dictionary objectForKey:MB_KEY_PLACE_OF_RETURN] insertObject:dic2 atIndex:0];
            
            //箱型
            NSMutableDictionary *dic3 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@"",@"key",@"全部",@"value", nil];
            [[[SingletonClass shareInstance].MB_Dictionary objectForKey:MB_KEY_CTNTYPE] insertObject:dic3 atIndex:0];
            
            //堆场
            NSMutableDictionary *dic4 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@"",@"key",@"",@"value", nil];
            [[[SingletonClass shareInstance].MB_Dictionary objectForKey:MB_KEY_DEPOT_INFO] insertObject:dic4 atIndex:0];
            
            //特种箱型
            NSMutableDictionary *dic5 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@"",@"key",
                                         @" ",@"value", nil];
            [[[SingletonClass shareInstance].MB_Dictionary objectForKey:MB_KEY_HANDTYPE] insertObject:dic5 atIndex:0];
        }
        else
        {
            NSLog(@"MB_Dic:码表获取失败");
//            [MyCommonFun dealwithServerCallBackInfoData:data];
        }
    };
}
#pragma mark--截取时间的年月日（"2014-04-23 11:16:28"）
+(NSString *)returnFirstTime:(NSString *)timeString
{
    if (timeString) {
        NSArray *arr = [timeString componentsSeparatedByString:@" "];
        return [arr objectAtIndex:0];
    }
    else
        return @"";
}
#pragma mark--弹出提示框
#pragma mark--渐变 显示 渐变 消失
+(void)showPromptView:(NSString *)title
{
    PopPromptView *popView = [[PopPromptView alloc] initWithFrame:CGRectMake(0, 0, boundsWidth/2, boundsWidth/3) andTitle:title];
    [popView showPromtView];
}

#pragma mark--
#pragma mark--计算一个月多少天
#pragma mark--如果year =0 默认就是今年，如果有值就是计算year那一年的month天数
+(NSInteger)calculateTotalDaysWithMonth:(NSInteger)month andYear:(NSInteger)year
{
    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){
        return 31;
    }
    else if (month == 2){
        int yearint = 0;
        if (year != 0) {
            yearint = year;
        }
        else{
            NSDate *date = [NSDate date];
            // Get Current Year
            NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
            [formatter setDateFormat:@"yyyy"];
            yearint = [[NSString stringWithFormat:@"%@",[formatter stringFromDate:date]] intValue];
        }
        
        if(((yearint %4==0)&&(yearint %100!=0))||(yearint %400==0)){
            return 29;
        }
        else
        {
            return 28;
        }
    }
    else {
        return 30;
    }
}


#pragma mark--计算 当前时间+addDays 的时间
#pragma mark--（例：addDays= 负数，表示前 n 天的日期）
+(NSString *)calculateTimeWithCurrentAddDays:(NSInteger)addDays
{
    //获得系统时间
    NSDate *  senddate=[NSDate date];
    NSDateFormatter  *dateformatter=[[NSDateFormatter alloc] init];
    [dateformatter setDateFormat:@"yyyy-MM-dd"];
    NSString *  locationString=[dateformatter stringFromDate:senddate];
    
    NSArray *array = [locationString componentsSeparatedByString:@"-"];
    NSString *year = [array objectAtIndex:0];
    NSString *month = [array objectAtIndex:1];
    NSString *day = [array objectAtIndex:2];
    
    if (addDays <= 0) {
        addDays = abs(addDays);
        if ([day intValue] > addDays) {
            NSInteger d = [day intValue] - addDays;
            if (d < 10) {
                day = [NSString stringWithFormat:@"0%d",d];
            }
            else{
                day = [NSString stringWithFormat:@"%d",d];
            }
        }
        else{
            if ([month intValue] >1) {
                NSInteger m = [month intValue]-1;
                if (m < 10) {
                    month = [NSString stringWithFormat:@"0%d",m];
                }
                else{
                    month = [NSString stringWithFormat:@"%d",m];
                }
                NSInteger dd = addDays - [day intValue];
                day = [NSString stringWithFormat:@"%d",[self calculateTotalDaysWithMonth:[month intValue] andYear:0] - dd];
            }
            else{
                year = [NSString stringWithFormat:@"%d",[year intValue]-1];
                month = @"12";
                NSInteger dd = addDays - [day intValue];
                day = [NSString stringWithFormat:@"%d",[self calculateTotalDaysWithMonth:[month intValue] andYear:[year intValue]]-dd];
            }
        }
    }
    else{
        NSInteger currentMonthDays =[self calculateTotalDaysWithMonth:[month intValue] andYear:[year intValue]];
        if ([day intValue] + addDays <= currentMonthDays) {
            if ([day intValue] + addDays < 10) {
                day =[NSString stringWithFormat:@"0%d",[day intValue] + addDays];
            }
            else
                day =[NSString stringWithFormat:@"%d",[day intValue] + addDays];
        }
        else{
            if (addDays -(currentMonthDays - [month intValue]) < 10) {
                day = [NSString stringWithFormat:@"0%d",addDays -(currentMonthDays - [month intValue])];
            }
            else{
                day = [NSString stringWithFormat:@"%d",addDays -(currentMonthDays - [month intValue])];
            }
            
            if ([month intValue] + 1 >12) {
                month = @"01";
                year = [NSString stringWithFormat:@"%d",[year intValue]+1];
            }
            else{
                if ([month intValue]+1 <10) {
                    month = [NSString stringWithFormat:@"0%d",[month intValue]+1];
                }
                else{
                    month = [NSString stringWithFormat:@"%d",[month intValue]+1];
                }
            }
        }
    }
    
    return [NSString stringWithFormat:@"%@-%@-%@",year,month,day];
}

#pragma mark--格式：yyyyMMdd
#pragma mark--计算前一天的时间（相对系统时间）
+(NSString *)calculateLastDayTime2
{
    NSString *timeStr = [MyCommonFun calculateLastDayTime];
    NSArray *timeArray = [timeStr componentsSeparatedByString:@"-"];
    NSString *str = @"";
    for (int i = 0; i < [timeArray count]; i++) {
        str = [str stringByAppendingString:[timeArray objectAtIndex:i]];
    }
    return str;
}
#pragma mark--格式：yyyy-MM-dd
#pragma mark--计算前一天的时间（相对系统时间）
+(NSString *)calculateLastDayTime
{
    //获得系统时间
    NSDate *  senddate=[NSDate date];
    NSDateFormatter  *dateformatter=[[NSDateFormatter alloc] init];
    [dateformatter setDateFormat:@"yyyy-MM-dd"];
    NSString *  locationString=[dateformatter stringFromDate:senddate];
    
    NSArray *array = [locationString componentsSeparatedByString:@"-"];
    NSString *year = [array objectAtIndex:0];
    NSString *mouth = [array objectAtIndex:1];
    NSString *day = [array objectAtIndex:2];
    
    if ([day intValue] >1) {
        NSInteger d = [day intValue] -1;
        if (d < 10) {
            day = [NSString stringWithFormat:@"0%d",d];
        }
        else{
            day = [NSString stringWithFormat:@"%d",d];
        }
    }
    else{
        if ([mouth intValue] >1) {
            NSInteger m = [mouth intValue]-1;
            if (m < 10) {
                mouth = [NSString stringWithFormat:@"0%d",m];
            }
            else{
                mouth = [NSString stringWithFormat:@"%d",m];
            }
            day = [NSString stringWithFormat:@"%d",[self calculateTotalDaysWithMonth:[mouth intValue] andYear:0]];
        }
        else{
            year = [NSString stringWithFormat:@"%d",[year intValue]-1];
            mouth = @"12";
            day = [NSString stringWithFormat:@"%d",[self calculateTotalDaysWithMonth:[mouth intValue] andYear:[year intValue]]];
        }
    }
    return [NSString stringWithFormat:@"%@-%@-%@",year,mouth,day];
}
#pragma mark-- 计算前一个月的时间
+(NSString *)returnLastMouth:(NSString *)timeString
{
    NSArray *array1 = [timeString componentsSeparatedByString:@"-"];
    NSInteger year = [[array1 objectAtIndex:0] intValue];
    NSInteger mouth = [[array1 objectAtIndex:1] intValue];
    NSInteger day = [[array1 objectAtIndex:2] intValue];
    NSString *year2,*mouth2,*day2;
    if (day >30) {
        day2 = [NSString stringWithFormat:@"0%d",day-30];
    }
    else{
        NSInteger k  = day;
        if (k<10) {
            day2 = [NSString stringWithFormat:@"0%d",k];
        }
        else{
            day2 = [NSString stringWithFormat:@"%d",k];
        }
        
        if (mouth>1) {
            NSInteger kk = mouth -1;
            if (kk<10) {
                mouth2 = [NSString stringWithFormat:@"0%d",kk];
            }
            else{
                mouth2 = [NSString stringWithFormat:@"%d",kk];
            }
            year2 = [NSString stringWithFormat:@"%d",year];
        }
        else{
            mouth2 = @"12";
            year2 = [NSString stringWithFormat:@"%d",year-1];;
        }
    }
    return [NSString stringWithFormat:@"%@%@%@",year2,mouth2,day2];
}
#pragma mark --行业资讯 返回给服务器新闻id
+(void)retunServerNewsIDArray:(NSMutableArray *)tempArray andType:(NSString *)mainType
{
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];
    
    [dic setObject:@"10014" forKey:INTERFACE_TAG];
    [dic setObject:mainType forKey:@"mainType"];
    [dic setObject:[tempArray componentsJoinedByString:@","] forKey:@"sIds"];
    
    MyConnection *jsonConnection= [[MyConnection alloc]init];
    jsonConnection.isNeedBracket = YES;
    [jsonConnection connectionAsynchronousRequstData:dic];
    jsonConnection.finishRequstDataBlock = ^(id data,NSError *error){
        DEBugMethod();
    };
}

@end
